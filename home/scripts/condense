#!/usr/bin/env python
import os
import re
import sys
import glob
import hashlib
import tempfile
import subprocess
import requests


def run(cmd):
    p = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if p.returncode != 0:
        print(p.stderr)
        exit()
    return p.returncode

def get_sub(url):
    # firstly, try to download subs directly
    saved_path = os.getcwd()
    with tempfile.TemporaryDirectory() as work_path:
        os.chdir(work_path)
        run(f'yt-dlp --write-sub --convert-subs srt --skip-download "{url}" -o output')
        subs = glob.glob('*.srt')
        if len(subs) != 0:
            file = subs[0]
            # run("sed -r '/^[0-9]+$/{n;d}' " + file + " > text")
            with open(file, 'r') as f:
                text = f.read()
            print(text)
        else:
            run(f'yt-dlp -f "wa" -x --audio-format mp3 "{url}" -o output')
            run("ffmpeg -i output.mp3 -acodec pcm_s16le -ar 16000 output.wav")
            os.system("whisper-cpp -m /storage/whisper/ggml-tiny-q5_1.bin -l auto -f output.wav -otxt 2>/dev/null |tee text.txt")
            os.system('ls -lh text.txt')
            with open('text.txt', 'r') as f:
                text = f.read()

    os.chdir(saved_path)
    text += "\n对于上面的视频文本，视频总结专家做出了如下的视频内容总结:\n"
    return text

def get_summarization(text, path):
    os.system(f'llama-cli -m /storage/llama/ggml-model-q4_0.gguf --temp 0.2 --repeat-penalty 1.15 --file ' + path + ' --log-disable --no-display-prompt --no-warmup --simple-io 2>/dev/null')

def usage():
    print('Usage: condense URL')

def main():
    if len(sys.argv) != 2:
        usage()
        exit()

    url = sys.argv[1]
    cache_fn = ".condense/" + hashlib.sha1(url.encode('utf-8')).hexdigest()
    cache_fn = os.path.join(os.environ['HOME'], cache_fn)
    cache_fn = os.path.abspath(cache_fn)
    if os.path.exists(cache_fn):
        with open(cache_fn, 'r') as f:
            print(f.read())
            exit()
    sub = get_sub(url)
    with open(cache_fn, "w+") as f:
        f.write(sub)
    get_summarization(sub, cache_fn)
    # print(summ)

if __name__ == '__main__':
    main()


